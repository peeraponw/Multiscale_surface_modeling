# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.openStep('X:/HET_micro3D/micro3D_HET_1/cubic_surface.stp', scaleFromFile=
    OFF)
mdb.models['Model-1'].PartFromGeometryFile(combine=False, dimensionality=
    THREE_D, geometryFile=mdb.acis, name='Cut_Part', type=DEFORMABLE_BODY)
mdb.models['Model-1'].Material(name='DP1000')
mdb.models['Model-1'].materials['DP1000'].Density(table=((7.85e-09, ), ))
mdb.models['Model-1'].materials['DP1000'].Elastic(table=((210000.0, 0.3), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='DP1000', name='DP1000', 
    thickness=None)
mdb.models['Model-1'].parts['Cut_Part'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['Cut_Part'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='DP1000', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].ExplicitDynamicsStep(name='move', previous='Initial', 
    timePeriod=0.01)
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(numIntervals=
    100, variables=('EVOL', 'PEEQ', 'RF', 'S', 'SDV', 'STATUS', 'U'))
mdb.models['Model-1'].TabularAmplitude(data=((0.0, 0.0), (0.01, 1.0)), name=
    'ramp', smooth=SOLVER_DEFAULT, timeSpan=STEP)
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name='Cut_Part-1', 
    part=mdb.models['Model-1'].parts['Cut_Part'])
# Save by ptangnun on 2019_11_19-22.16.18; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].DisplacementBC(amplitude='ramp', createStepName='move', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'move', region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), u1=6.0, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, 
    ur3=UNSET)
mdb.models['Model-1'].XsymmBC(createStepName='Initial', localCsys=None, name=
    'xsymm', region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )))
mdb.models['Model-1'].YsymmBC(createStepName='Initial', localCsys=None, name=
    'ysymm', region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces.getSequenceFromMask(
    mask=('[#20 ]', ), )))
mdb.models['Model-1'].ZsymmBC(createStepName='Initial', localCsys=None, name=
    'zsymm', region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )))
mdb.models['Model-1'].rootAssembly.setMeshControls(elemShape=HEX_DOMINATED, 
    regions=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=BOTTOM_UP)
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='micro3D_HET_1', nodalOutputPrecision=
    SINGLE, numCpus=1, numDomains=1, parallelizationMethodExplicit=DOMAIN, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
# Save by ptangnun on 2019_11_19-22.27.44; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=EXPLICIT, secondOrderAccuracy=OFF, 
    kinematicSplit=AVERAGE_STRAIN, hourglassControl=DEFAULT, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=EXPLICIT), 
    ElemType(elemCode=C3D4, elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ), size=1.5)
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#1d ]', ), ), minSizeFactor=0.1, size=0.5)
# Save by ptangnun on 2019_11_19-22.31.29; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.PartitionFaceByAuto(face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[0])
#* The face is unchanged by the auto-partition.
mdb.models['Model-1'].rootAssembly.PartitionFaceByAuto(face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[2])
mdb.models['Model-1'].rootAssembly.PartitionFaceByAuto(face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[25])
mdb.models['Model-1'].rootAssembly.PartitionFaceByAuto(face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[60])
mdb.models['Model-1'].rootAssembly.PartitionFaceByAuto(face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[84])
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Partition face-1', 
    'Partition face-2', 'Partition face-3', 'Partition face-4'))
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgePoints(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[0], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[9], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[2], 
    point1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].vertices[1], 
    point2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].vertices[7])
#* Feature creation failed.
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[2], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[3], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[0], 
    parameter1=0.5, parameter2=0.5)
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[1], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[2], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[0], 
    parameter1=0.5, parameter2=0.5)
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[1], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[2], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[0], 
    parameter1=0.5, parameter2=0.5)
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[8], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[10], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[0], 
    parameter1=0.5, parameter2=0.5)
del mdb.models['Model-1'].rootAssembly.features['Partition face-3']
#* Regeneration Failed
del mdb.models['Model-1'].rootAssembly.features['Partition face-4']
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[1], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[2], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[0], 
    parameter1=0.5, parameter2=0.8)
mdb.models['Model-1'].rootAssembly.features['Partition face-3'].setValues(
    parameter2=0.3)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[1], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[3], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[0], 
    parameter1=0.5, parameter2=0.8)
mdb.models['Model-1'].rootAssembly.features['Partition face-4'].setValues(
    parameter1=0.8, parameter2=0.4)
mdb.models['Model-1'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-1'].rootAssembly.restore()
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.models['Model-1'].rootAssembly.features['Partition face-4']
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[1], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[3], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[0], 
    parameter1=0.9, parameter2=0.8)
del mdb.models['Model-1'].rootAssembly.features['Partition face-4']
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[1], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[3], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[0], 
    parameter1=0.8, parameter2=0.2)
#* Feature creation failed.
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[3], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[7], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[0], 
    parameter1=0.5, parameter2=0.2)
del mdb.models['Model-1'].rootAssembly.features['Partition face-4']
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[7], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[4], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[0], 
    parameter1=0.8, parameter2=0.2)
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[0], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[10], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[1], 
    parameter1=0.7, parameter2=0.8)
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[9], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[0], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[2], 
    parameter1=0.2, parameter2=0.7)
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[0], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[13], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[3], 
    parameter1=0.8, parameter2=0.2)
del mdb.models['Model-1'].rootAssembly.features['Partition face-7']
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[0], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[13], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[3], 
    parameter1=0.7, parameter2=0.2)
del mdb.models['Model-1'].rootAssembly.features['Partition face-7']
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[0], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[13], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[3], 
    parameter1=0.7, parameter2=0.1)
del mdb.models['Model-1'].rootAssembly.features['Partition face-7']
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[0], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[13], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[3], 
    parameter1=0.8, parameter2=0.05)
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[1], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[3], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[0], 
    parameter1=0.8, parameter2=0.05)
#* Feature creation failed.
mdb.models['Model-1'].rootAssembly.PartitionFaceByCurvedPathEdgeParams(edge1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[3], edge2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[0], face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[0], 
    parameter1=0.1, parameter2=0.03)
mdb.models['Model-1'].rootAssembly.features['Partition face-8'].setValues(
    parameter1=0.08, parameter2=0.05)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.features['Partition face-8'].setValues(
    parameter1=0.05)
mdb.models['Model-1'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-1'].rootAssembly.restore()
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.models['Model-1'].rootAssembly.features['Partition face-8']
mdb.models['Model-1'].rootAssembly.PartitionEdgeByParam(edges=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#8 ]', ), ), parameter=0.0824759453742577)
mdb.models['Model-1'].rootAssembly.PartitionEdgeByParam(edges=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#1 ]', ), ), parameter=0.154925282022546)
mdb.models['Model-1'].rootAssembly.PartitionFaceByShortestPath(faces=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].vertices[4], 
    point2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].vertices[0])
del mdb.models['Model-1'].rootAssembly.features['Partition face-8']
mdb.models['Model-1'].rootAssembly.features['Partition edge-1'].setValues(
    parameter=0.0424759453743)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.features['Partition edge-1'].setValues(
    parameter=0.0524759453743)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.PartitionFaceByShortestPath(faces=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].vertices[3], 
    point2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[0], 
    MIDDLE))
del mdb.models['Model-1'].rootAssembly.features['Partition face-8']
mdb.models['Model-1'].rootAssembly.features['Partition edge-1'].setValues(
    parameter=0.0724759453743)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.PartitionFaceByShortestPath(faces=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].vertices[0], 
    point2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[3], 
    MIDDLE))
del mdb.models['Model-1'].rootAssembly.features['Partition face-8']
del mdb.models['Model-1'].rootAssembly.features['Partition edge-1']
mdb.models['Model-1'].rootAssembly.PartitionEdgeByParam(edges=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#2 ]', ), ), parameter=0.256571628747716)
mdb.models['Model-1'].rootAssembly.PartitionFaceByShortestPath(faces=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].vertices[0], 
    point2=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].vertices[2])
# Save by ptangnun on 2019_11_19-23.09.24; build 2017 2016_09_27-23.54.59 126836
# Save by ptangnun on 2019_11_19-23.19.03; build 2017 2016_09_27-23.54.59 126836
# Save by ptangnun on 2019_11_19-23.19.17; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=2.12, name='__profile__', 
    sheetSize=84.85, transform=
    mdb.models['Model-1'].parts['Cut_Part'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Cut_Part'].faces[5], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Cut_Part'].edges[8], 
    sketchOrientation=RIGHT, origin=(0.0, -15.0, 15.0)))
mdb.models['Model-1'].parts['Cut_Part'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-16.96, -4.24), 
    point2=(-16.96, -15.37))
#* Rectangle cannot be created.
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-16.96, -4.24), 
    point2=(-16.96, -16.96))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-16.96, -16.96), 
    point2=(16.96, -16.96))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(16.96, -16.96), 
    point2=(16.96, 16.96))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(16.96, 16.96), 
    point2=(4.24, 16.96))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(4.24, 16.96), 
    point2=(4.24, -4.24))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(4.24, -4.24), 
    point2=(-16.96, -4.24))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].parts['Cut_Part'].CutExtrude(flipExtrudeDirection=OFF, 
    sketch=mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=
    RIGHT, sketchPlane=mdb.models['Model-1'].parts['Cut_Part'].faces[5], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-1'].parts['Cut_Part'].edges[8])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=2.61, name='__profile__', 
    sheetSize=104.44, transform=
    mdb.models['Model-1'].parts['Cut_Part'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Cut_Part'].faces[3], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Cut_Part'].edges[7], 
    sketchOrientation=RIGHT, origin=(15.0, -0.399647, 20.309882)))
mdb.models['Model-1'].parts['Cut_Part'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 11.0925), 
    point2=(16.965, -12.3975))
mdb.models['Model-1'].sketches['__profile__'].undo()
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(2.61, 10.44), 
    point2=(15.66, -10.44))
mdb.models['Model-1'].parts['Cut_Part'].CutExtrude(flipExtrudeDirection=OFF, 
    sketch=mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=
    RIGHT, sketchPlane=mdb.models['Model-1'].parts['Cut_Part'].faces[3], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-1'].parts['Cut_Part'].edges[7])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Datum csys-1', 
    'Partition face-1', 'Partition face-2', 'Partition face-3', 
    'Partition face-4', 'Partition face-5', 'Partition face-6', 
    'Partition face-7', 'Partition edge-2', 'Partition edge-1', 
    'Partition face-8'))
mdb.models['Model-1'].rootAssembly.setMeshControls(algorithm=ADVANCING_FRONT, 
    regions=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), technique=SWEEP)
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ), size=1.0)
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#d20 ]', ), ), minSizeFactor=0.1, size=0.3)
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#f ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#d20 ]', ), ), minSizeFactor=0.1, size=0.3)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ), size=1.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.PartitionFaceByAuto(face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[5])
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
# Save by ptangnun on 2019_11_19-23.49.21; build 2017 2016_09_27-23.54.59 126836
# Save by ptangnun on 2019_11_19-23.49.36; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].boundaryConditions['move'].setValues(region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces.getSequenceFromMask(
    mask=('[#4000 ]', ), )))
mdb.models['Model-1'].boundaryConditions['xsymm'].setValues(region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces.getSequenceFromMask(
    mask=('[#10000 ]', ), )))
mdb.models['Model-1'].boundaryConditions['ysymm'].setValues(region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces.getSequenceFromMask(
    mask=('[#1000 ]', ), )))
mdb.models['Model-1'].boundaryConditions['zsymm'].setValues(region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces.getSequenceFromMask(
    mask=('[#8000 ]', ), )))
# Save by ptangnun on 2019_11_19-23.54.47; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].boundaryConditions['move'].setValues(u1=4.0)
# Save by ptangnun on 2019_11_19-23.56.05; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['micro3D_HET_1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['micro3D_HET_1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'coruscant', 'handle': 0, 'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT TYPE C3D6 USES THE REDUCED INTEGRATION IN Abaqus/Explicit AND WILL BE REFERRED TO AS C3D6R FROM HERE ON', 
    'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3968 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'The volume of 3634 elements is zero, small, or negative. Check coordinates or node numbering, or modify the mesh seed. In the case of a tetrahedron this error may indicate that all nodes are located very nearly in a plane. The elements have been identified in element set ErrElemVolSmallNegZero.', 
    'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE SDV HAS NO COMPONENTS IN THIS ANALYSIS FOR ELEMENT TYPE C3D6', 
    'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE SDV HAS NO COMPONENTS IN THIS ANALYSIS FOR ELEMENT TYPE C3D8R', 
    'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\micro3D_HET_1.odb', 'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'micro3D_HET_1'})
# Save by ptangnun on 2019_11_20-00.03.54; build 2017 2016_09_27-23.54.59 126836
# Save by ptangnun on 2019_11_20-00.11.22; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.PartitionCellByPlaneNormalToEdge(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edge=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[41], 
    point=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[41], 
    MIDDLE))
del mdb.models['Model-1'].rootAssembly.features['Partition cell-1']
mdb.models['Model-1'].rootAssembly.PartitionEdgeByParam(edges=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#4000000 ]', ), ), parameter=0.128014432940938)
mdb.models['Model-1'].rootAssembly.PartitionCellByPlaneNormalToEdge(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edge=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[26], 
    point=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].vertices[20])
mdb.models['Model-1'].rootAssembly.PartitionEdgeByParam(edges=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#4000 ]', ), ), parameter=0.0306423375557795)
del mdb.models['Model-1'].rootAssembly.features['Partition cell-1']
del mdb.models['Model-1'].rootAssembly.features['Partition edge-1']
#* Regeneration Failed
del mdb.models['Model-1'].rootAssembly.features['Partition edge-2']
mdb.models['Model-1'].rootAssembly.PartitionEdgeByParam(edges=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#0 #8 ]', ), ), parameter=0.258076160112199)
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(plane=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[10], 
    point=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].vertices[26])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), datumPlane=mdb.models['Model-1'].rootAssembly.datums[56])
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(plane=
    mdb.models['Model-1'].rootAssembly.datums[56], point=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[47], 
    MIDDLE))
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), datumPlane=mdb.models['Model-1'].rootAssembly.datums[58])
del mdb.models['Model-1'].rootAssembly.features['Partition face-1']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.97, name='__profile__', 
    sheetSize=38.85, transform=
    mdb.models['Model-1'].rootAssembly.MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[18], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[26], 
    sketchOrientation=RIGHT, origin=(13.084259, 12.957554, 10.76)))
mdb.models['Model-1'].rootAssembly.projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-1.94, 3.88), 
    point2=(17.324259, -0.907393509662318))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.97, 3.88), 
    point2=(-0.97, -0.907393509708614))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[18])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[18])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[11], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[12], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 3.88), point2=(
    0.0, -0.907393509708614))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[19])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[19])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[14], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.97, 3.88), point2=
    (0.97, -0.907393509708614))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[20])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[20])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[15], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[16], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(1.94, 3.88), point2=
    (1.94, -0.907393509708614))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[21])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[21])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[17], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[18], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(2.91, 3.88), point2=
    (2.91, -0.907393509708614))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[22])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[22])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[19], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[20], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], ))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-1.94, 3.88), 
    point2=(-1.94, -0.907393509662318))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[23])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[23])
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[23], ))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-1.94, 
    -0.907393509662318), point2=(-1.94, 3.88))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[24])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[24])
mdb.models['Model-1'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[16], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[19], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[20], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[21], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[22], 
    mdb.models['Model-1'].sketches['__profile__'].geometry[24], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[63], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[64], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[66], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[69], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[70], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[71], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[72], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[75], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[76], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[77], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[78], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[81], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[82], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[83], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[84], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[87], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[88], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[89], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[90], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[93], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[94], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[95], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[96], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[103], 
    mdb.models['Model-1'].sketches['__profile__'].constraints[104]))
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-0.97, -0.97), 
    point2=(-2.91, 2.91))
mdb.models['Model-1'].rootAssembly.PartitionCellBySketch(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), sketch=mdb.models['Model-1'].sketches['__profile__'], 
    sketchPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[18], 
    sketchUpEdge=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[26])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].rootAssembly.features['Partition cell-3'].sketch)
mdb.models['Model-1'].rootAssembly.projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].rootAssembly.features['Partition cell-3'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.models['Model-1'].rootAssembly.features['Partition cell-3']
del mdb.models['Model-1'].rootAssembly.features['Partition cell-2']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.98, name='__profile__', 
    sheetSize=39.58, transform=
    mdb.models['Model-1'].rootAssembly.MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[8], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[6], 
    sketchOrientation=RIGHT, origin=(9.200839, 11.92356, 10.76)))
mdb.models['Model-1'].rootAssembly.projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(3.92, -3.185), 
    point2=(-6.86, 4.9))
mdb.models['Model-1'].rootAssembly.PartitionCellBySketch(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), sketch=mdb.models['Model-1'].sketches['__profile__'], 
    sketchPlane=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[8], 
    sketchUpEdge=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges[6])
del mdb.models['Model-1'].sketches['__profile__']
del mdb.models['Model-1'].rootAssembly.features['Partition cell-2']
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE2, offset=4.0, 
    plane=mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[8])
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE1, offset=4.0, 
    plane=mdb.models['Model-1'].rootAssembly.datums[62])
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE1, offset=4.0, 
    plane=mdb.models['Model-1'].rootAssembly.datums[63])
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE1, offset=4.0, 
    plane=mdb.models['Model-1'].rootAssembly.datums[64])
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE2, offset=4.0, 
    plane=mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[7])
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE1, offset=4.0, 
    plane=mdb.models['Model-1'].rootAssembly.datums[66])
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE1, offset=4.0, 
    plane=mdb.models['Model-1'].rootAssembly.datums[67])
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE1, offset=4.0, 
    plane=mdb.models['Model-1'].rootAssembly.datums[68])
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE2, offset=2.0, 
    plane=mdb.models['Model-1'].rootAssembly.datums[58])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), datumPlane=mdb.models['Model-1'].rootAssembly.datums[66])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), datumPlane=mdb.models['Model-1'].rootAssembly.datums[67])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#2 ]', ), ), datumPlane=mdb.models['Model-1'].rootAssembly.datums[68])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), datumPlane=mdb.models['Model-1'].rootAssembly.datums[69])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1f ]', ), ), datumPlane=mdb.models['Model-1'].rootAssembly.datums[62])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1f0 ]', ), ), datumPlane=mdb.models['Model-1'].rootAssembly.datums[63])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1f0 ]', ), ), datumPlane=mdb.models['Model-1'].rootAssembly.datums[64])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1f0 ]', ), ), datumPlane=mdb.models['Model-1'].rootAssembly.datums[65])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1ffffff ]', ), ), datumPlane=
    mdb.models['Model-1'].rootAssembly.datums[58])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#fbfdff #20000 ]', ), ), datumPlane=
    mdb.models['Model-1'].rootAssembly.datums[70])
del mdb.models['Model-1'].rootAssembly.features['Partition cell-11']
del mdb.models['Model-1'].rootAssembly.features['Partition cell-10']
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE1, offset=1.0, 
    plane=mdb.models['Model-1'].rootAssembly.datums[58])
del mdb.models['Model-1'].rootAssembly.features['Datum plane-12']
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE1, offset=0.5, 
    plane=mdb.models['Model-1'].rootAssembly.datums[58])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#1ffffff ]', ), ), datumPlane=
    mdb.models['Model-1'].rootAssembly.datums[82])
# Save by ptangnun on 2019_11_20-06.39.35; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#ffffffff #7ffff ]', ), ), technique=SWEEP)
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#0:5 #800000 ]', ), ))
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#ffffffff:8 #f ]', ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE2, offset=2.0, 
    plane=mdb.models['Model-1'].rootAssembly.datums[66])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#dc0000 ]', ), ), datumPlane=
    mdb.models['Model-1'].rootAssembly.datums[87])
mdb.models['Model-1'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#f87fffff #ffffff ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE2, offset=2.0, 
    plane=mdb.models['Model-1'].rootAssembly.datums[62])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#7800000 ]', ), ), datumPlane=
    mdb.models['Model-1'].rootAssembly.datums[90])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#48 ]', ), ), datumPlane=mdb.models['Model-1'].rootAssembly.datums[70])
del mdb.models['Model-1'].rootAssembly.features['Partition cell-13']
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE2, offset=1.0, 
    plane=mdb.models['Model-1'].rootAssembly.datums[70])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#48 ]', ), ), datumPlane=mdb.models['Model-1'].rootAssembly.datums[93])
del mdb.models['Model-1'].rootAssembly.features['Partition cell-13']
del mdb.models['Model-1'].rootAssembly.features['Datum plane-15']
mdb.models['Model-1'].rootAssembly.DatumPlaneByOffset(flip=SIDE2, offset=1.2, 
    plane=mdb.models['Model-1'].rootAssembly.datums[70])
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#48 ]', ), ), datumPlane=mdb.models['Model-1'].rootAssembly.datums[95])
# Save by ptangnun on 2019_11_20-06.47.31; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#ffffffff #3fffffff ]', ), ), technique=SWEEP)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#104000 #800000 #800 #13 #4000000 #1002010 #40000', 
    ' #80008001 #40042040 #14a0000 ]'), ), minSizeFactor=0.1, size=0.3)
mdb.models['Model-1'].rootAssembly.deleteSeeds(regions=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#ffffffff:10 #f ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#c4100800 #900808 #a0820800 #413 #4000000 #1002010 #0', 
    ' #2ae10002 #41a522d4 #10a0000 ]'), ), minSizeFactor=0.1, size=0.5)
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#c4100800 #900808 #a0820800 #413 #4000000 #1002010 #0', 
    ' #2ae10002 #41a522d4 #10a0000 ]'), ), name='Edge Seeds-1')
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#2004000 #40080414 #41040192 #801 #4000000 #2002020 #4050180', 
    ' #80108281 #4002200b #504000 ]'), ), minSizeFactor=0.1, size=0.5)
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].edges.getSequenceFromMask(
    ('[#2004000 #40080414 #41040192 #801 #4000000 #2002020 #4050180', 
    ' #80108281 #4002200b #504000 ]'), ), name='Edge Seeds-2')
# Save by ptangnun on 2019_11_20-06.54.05; build 2017 2016_09_27-23.54.59 126836
# Save by ptangnun on 2019_11_20-06.54.10; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
mdb.models['Model-1'].rootAssembly.PartitionFaceByAuto(face=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].faces[45])
#* The face is unchanged by the auto-partition.
mdb.models['Model-1'].rootAssembly.PartitionCellByDatumPlane(cells=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#200 ]', ), ), datumPlane=mdb.models['Model-1'].rootAssembly.datums[70])
mdb.models['Model-1'].rootAssembly.setMeshControls(regions=
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'].cells.getSequenceFromMask(
    ('[#fffffff5 #7fffffff ]', ), ), technique=STRUCTURED)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Cut_Part-1'], ))
# Save by ptangnun on 2019_11_20-06.57.39; build 2017 2016_09_27-23.54.59 126836
# Save by ptangnun on 2019_11_20-06.58.25; build 2017 2016_09_27-23.54.59 126836
# Save by ptangnun on 2019_11_20-06.58.35; build 2017 2016_09_27-23.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['micro3D_HET_1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['micro3D_HET_1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'coruscant', 'handle': 0, 'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '57 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT VARIABLE SDV HAS NO COMPONENTS IN THIS ANALYSIS FOR ELEMENT TYPE C3D8R', 
    'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'coruscant', 'handle': 17092, 'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 3 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'coruscant', 'handle': 11300, 'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 7.79257813832146e-09, 'stepTime': 0.0, 
    'totalEnergy': 0.0406994819641113, 'cpuTime': 0.200000002980232, 
    'jobName': 'micro3D_HET_1', 'step': 1, 'increment': 0, 
    'phase': EXPLICIT_PHASE, 'kineticEnergy': 0.0406994819641113})
mdb.jobs['micro3D_HET_1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'micro3D_HET_1'})
mdb.jobs['micro3D_HET_1']._Message(JOB_COMPLETED, {
    'time': 'Wed Nov 20 06:59:32 2019', 'jobName': 'micro3D_HET_1'})
# Save by ptangnun on 2019_11_20-07.36.07; build 2017 2016_09_27-23.54.59 126836
